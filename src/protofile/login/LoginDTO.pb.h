// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginDTO.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LoginDTO_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LoginDTO_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "DTO.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LoginDTO_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LoginDTO_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LoginDTO_2eproto;
namespace SSDTO {
class Login_DTO;
struct Login_DTODefaultTypeInternal;
extern Login_DTODefaultTypeInternal _Login_DTO_default_instance_;
}  // namespace SSDTO
PROTOBUF_NAMESPACE_OPEN
template<> ::SSDTO::Login_DTO* Arena::CreateMaybeMessage<::SSDTO::Login_DTO>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SSDTO {

// ===================================================================

class Login_DTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSDTO.Login_DTO) */ {
 public:
  inline Login_DTO() : Login_DTO(nullptr) {}
  ~Login_DTO() override;
  explicit PROTOBUF_CONSTEXPR Login_DTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Login_DTO(const Login_DTO& from);
  Login_DTO(Login_DTO&& from) noexcept
    : Login_DTO() {
    *this = ::std::move(from);
  }

  inline Login_DTO& operator=(const Login_DTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_DTO& operator=(Login_DTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Login_DTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const Login_DTO* internal_default_instance() {
    return reinterpret_cast<const Login_DTO*>(
               &_Login_DTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Login_DTO& a, Login_DTO& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_DTO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login_DTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Login_DTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Login_DTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Login_DTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Login_DTO& from) {
    Login_DTO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_DTO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSDTO.Login_DTO";
  }
  protected:
  explicit Login_DTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kSsnameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kEmailFieldNumber = 5,
    kIpFieldNumber = 6,
    kIsPassFieldNumber = 4,
    kTypeFieldNumber = 7,
  };
  // bytes ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ssid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ssid();
  PROTOBUF_NODISCARD std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // bytes ssname = 2;
  void clear_ssname();
  const std::string& ssname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ssname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ssname();
  PROTOBUF_NODISCARD std::string* release_ssname();
  void set_allocated_ssname(std::string* ssname);
  private:
  const std::string& _internal_ssname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ssname(const std::string& value);
  std::string* _internal_mutable_ssname();
  public:

  // bytes password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // bytes email = 5;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // bytes ip = 6;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // bool is_pass = 4;
  void clear_is_pass();
  bool is_pass() const;
  void set_is_pass(bool value);
  private:
  bool _internal_is_pass() const;
  void _internal_set_is_pass(bool value);
  public:

  // .SSDTO.Business_Type type = 7;
  void clear_type();
  ::SSDTO::Business_Type type() const;
  void set_type(::SSDTO::Business_Type value);
  private:
  ::SSDTO::Business_Type _internal_type() const;
  void _internal_set_type(::SSDTO::Business_Type value);
  public:

  // @@protoc_insertion_point(class_scope:SSDTO.Login_DTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    bool is_pass_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_LoginDTO_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Login_DTO

// bytes ssid = 1;
inline void Login_DTO::clear_ssid() {
  _impl_.ssid_.ClearToEmpty();
}
inline const std::string& Login_DTO::ssid() const {
  // @@protoc_insertion_point(field_get:SSDTO.Login_DTO.ssid)
  return _internal_ssid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login_DTO::set_ssid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ssid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDTO.Login_DTO.ssid)
}
inline std::string* Login_DTO::mutable_ssid() {
  std::string* _s = _internal_mutable_ssid();
  // @@protoc_insertion_point(field_mutable:SSDTO.Login_DTO.ssid)
  return _s;
}
inline const std::string& Login_DTO::_internal_ssid() const {
  return _impl_.ssid_.Get();
}
inline void Login_DTO::_internal_set_ssid(const std::string& value) {
  
  _impl_.ssid_.Set(value, GetArenaForAllocation());
}
inline std::string* Login_DTO::_internal_mutable_ssid() {
  
  return _impl_.ssid_.Mutable(GetArenaForAllocation());
}
inline std::string* Login_DTO::release_ssid() {
  // @@protoc_insertion_point(field_release:SSDTO.Login_DTO.ssid)
  return _impl_.ssid_.Release();
}
inline void Login_DTO::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  _impl_.ssid_.SetAllocated(ssid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ssid_.IsDefault()) {
    _impl_.ssid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDTO.Login_DTO.ssid)
}

// bytes ssname = 2;
inline void Login_DTO::clear_ssname() {
  _impl_.ssname_.ClearToEmpty();
}
inline const std::string& Login_DTO::ssname() const {
  // @@protoc_insertion_point(field_get:SSDTO.Login_DTO.ssname)
  return _internal_ssname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login_DTO::set_ssname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ssname_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDTO.Login_DTO.ssname)
}
inline std::string* Login_DTO::mutable_ssname() {
  std::string* _s = _internal_mutable_ssname();
  // @@protoc_insertion_point(field_mutable:SSDTO.Login_DTO.ssname)
  return _s;
}
inline const std::string& Login_DTO::_internal_ssname() const {
  return _impl_.ssname_.Get();
}
inline void Login_DTO::_internal_set_ssname(const std::string& value) {
  
  _impl_.ssname_.Set(value, GetArenaForAllocation());
}
inline std::string* Login_DTO::_internal_mutable_ssname() {
  
  return _impl_.ssname_.Mutable(GetArenaForAllocation());
}
inline std::string* Login_DTO::release_ssname() {
  // @@protoc_insertion_point(field_release:SSDTO.Login_DTO.ssname)
  return _impl_.ssname_.Release();
}
inline void Login_DTO::set_allocated_ssname(std::string* ssname) {
  if (ssname != nullptr) {
    
  } else {
    
  }
  _impl_.ssname_.SetAllocated(ssname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ssname_.IsDefault()) {
    _impl_.ssname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDTO.Login_DTO.ssname)
}

// bytes password = 3;
inline void Login_DTO::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& Login_DTO::password() const {
  // @@protoc_insertion_point(field_get:SSDTO.Login_DTO.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login_DTO::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDTO.Login_DTO.password)
}
inline std::string* Login_DTO::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:SSDTO.Login_DTO.password)
  return _s;
}
inline const std::string& Login_DTO::_internal_password() const {
  return _impl_.password_.Get();
}
inline void Login_DTO::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* Login_DTO::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* Login_DTO::release_password() {
  // @@protoc_insertion_point(field_release:SSDTO.Login_DTO.password)
  return _impl_.password_.Release();
}
inline void Login_DTO::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDTO.Login_DTO.password)
}

// bool is_pass = 4;
inline void Login_DTO::clear_is_pass() {
  _impl_.is_pass_ = false;
}
inline bool Login_DTO::_internal_is_pass() const {
  return _impl_.is_pass_;
}
inline bool Login_DTO::is_pass() const {
  // @@protoc_insertion_point(field_get:SSDTO.Login_DTO.is_pass)
  return _internal_is_pass();
}
inline void Login_DTO::_internal_set_is_pass(bool value) {
  
  _impl_.is_pass_ = value;
}
inline void Login_DTO::set_is_pass(bool value) {
  _internal_set_is_pass(value);
  // @@protoc_insertion_point(field_set:SSDTO.Login_DTO.is_pass)
}

// bytes email = 5;
inline void Login_DTO::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& Login_DTO::email() const {
  // @@protoc_insertion_point(field_get:SSDTO.Login_DTO.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login_DTO::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDTO.Login_DTO.email)
}
inline std::string* Login_DTO::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:SSDTO.Login_DTO.email)
  return _s;
}
inline const std::string& Login_DTO::_internal_email() const {
  return _impl_.email_.Get();
}
inline void Login_DTO::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* Login_DTO::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* Login_DTO::release_email() {
  // @@protoc_insertion_point(field_release:SSDTO.Login_DTO.email)
  return _impl_.email_.Release();
}
inline void Login_DTO::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDTO.Login_DTO.email)
}

// bytes ip = 6;
inline void Login_DTO::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& Login_DTO::ip() const {
  // @@protoc_insertion_point(field_get:SSDTO.Login_DTO.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login_DTO::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDTO.Login_DTO.ip)
}
inline std::string* Login_DTO::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:SSDTO.Login_DTO.ip)
  return _s;
}
inline const std::string& Login_DTO::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void Login_DTO::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* Login_DTO::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* Login_DTO::release_ip() {
  // @@protoc_insertion_point(field_release:SSDTO.Login_DTO.ip)
  return _impl_.ip_.Release();
}
inline void Login_DTO::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDTO.Login_DTO.ip)
}

// .SSDTO.Business_Type type = 7;
inline void Login_DTO::clear_type() {
  _impl_.type_ = 0;
}
inline ::SSDTO::Business_Type Login_DTO::_internal_type() const {
  return static_cast< ::SSDTO::Business_Type >(_impl_.type_);
}
inline ::SSDTO::Business_Type Login_DTO::type() const {
  // @@protoc_insertion_point(field_get:SSDTO.Login_DTO.type)
  return _internal_type();
}
inline void Login_DTO::_internal_set_type(::SSDTO::Business_Type value) {
  
  _impl_.type_ = value;
}
inline void Login_DTO::set_type(::SSDTO::Business_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SSDTO.Login_DTO.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace SSDTO

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LoginDTO_2eproto
