// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EnrollDTO.proto

#include "EnrollDTO.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SSDTO {
PROTOBUF_CONSTEXPR Enroll_DTO::Enroll_DTO(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ssid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Enroll_DTODefaultTypeInternal {
  PROTOBUF_CONSTEXPR Enroll_DTODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Enroll_DTODefaultTypeInternal() {}
  union {
    Enroll_DTO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Enroll_DTODefaultTypeInternal _Enroll_DTO_default_instance_;
}  // namespace SSDTO
static ::_pb::Metadata file_level_metadata_EnrollDTO_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_EnrollDTO_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_EnrollDTO_2eproto = nullptr;

const uint32_t TableStruct_EnrollDTO_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSDTO::Enroll_DTO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSDTO::Enroll_DTO, _impl_.ssid_),
  PROTOBUF_FIELD_OFFSET(::SSDTO::Enroll_DTO, _impl_.user_name_),
  PROTOBUF_FIELD_OFFSET(::SSDTO::Enroll_DTO, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::SSDTO::Enroll_DTO, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::SSDTO::Enroll_DTO, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::SSDTO::Enroll_DTO, _impl_.type_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SSDTO::Enroll_DTO)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SSDTO::_Enroll_DTO_default_instance_._instance,
};

const char descriptor_table_protodef_EnrollDTO_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017EnrollDTO.proto\022\005SSDTO\032\tDTO.proto\"~\n\nE"
  "nroll_DTO\022\014\n\004SSID\030\001 \001(\014\022\021\n\tuser_name\030\002 \001"
  "(\014\022\020\n\010password\030\003 \001(\014\022\r\n\005email\030\004 \001(\014\022\n\n\002i"
  "p\030\005 \001(\014\022\"\n\004type\030\006 \001(\0162\024.SSDTO.Business_T"
  "ypeb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_EnrollDTO_2eproto_deps[1] = {
  &::descriptor_table_DTO_2eproto,
};
static ::_pbi::once_flag descriptor_table_EnrollDTO_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_EnrollDTO_2eproto = {
    false, false, 171, descriptor_table_protodef_EnrollDTO_2eproto,
    "EnrollDTO.proto",
    &descriptor_table_EnrollDTO_2eproto_once, descriptor_table_EnrollDTO_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_EnrollDTO_2eproto::offsets,
    file_level_metadata_EnrollDTO_2eproto, file_level_enum_descriptors_EnrollDTO_2eproto,
    file_level_service_descriptors_EnrollDTO_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_EnrollDTO_2eproto_getter() {
  return &descriptor_table_EnrollDTO_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_EnrollDTO_2eproto(&descriptor_table_EnrollDTO_2eproto);
namespace SSDTO {

// ===================================================================

class Enroll_DTO::_Internal {
 public:
};

Enroll_DTO::Enroll_DTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SSDTO.Enroll_DTO)
}
Enroll_DTO::Enroll_DTO(const Enroll_DTO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Enroll_DTO* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ssid_){}
    , decltype(_impl_.user_name_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ssid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ssid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ssid().empty()) {
    _this->_impl_.ssid_.Set(from._internal_ssid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:SSDTO.Enroll_DTO)
}

inline void Enroll_DTO::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ssid_){}
    , decltype(_impl_.user_name_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ssid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ssid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Enroll_DTO::~Enroll_DTO() {
  // @@protoc_insertion_point(destructor:SSDTO.Enroll_DTO)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Enroll_DTO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ssid_.Destroy();
  _impl_.user_name_.Destroy();
  _impl_.password_.Destroy();
  _impl_.email_.Destroy();
  _impl_.ip_.Destroy();
}

void Enroll_DTO::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Enroll_DTO::Clear() {
// @@protoc_insertion_point(message_clear_start:SSDTO.Enroll_DTO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ssid_.ClearToEmpty();
  _impl_.user_name_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Enroll_DTO::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes SSID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes email = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SSDTO.Business_Type type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::SSDTO::Business_Type>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Enroll_DTO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSDTO.Enroll_DTO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes SSID = 1;
  if (!this->_internal_ssid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // bytes user_name = 2;
  if (!this->_internal_user_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  // bytes password = 3;
  if (!this->_internal_password().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_password(), target);
  }

  // bytes email = 4;
  if (!this->_internal_email().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_email(), target);
  }

  // bytes ip = 5;
  if (!this->_internal_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_ip(), target);
  }

  // .SSDTO.Business_Type type = 6;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSDTO.Enroll_DTO)
  return target;
}

size_t Enroll_DTO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSDTO.Enroll_DTO)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes SSID = 1;
  if (!this->_internal_ssid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ssid());
  }

  // bytes user_name = 2;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_name());
  }

  // bytes password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_password());
  }

  // bytes email = 4;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_email());
  }

  // bytes ip = 5;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip());
  }

  // .SSDTO.Business_Type type = 6;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Enroll_DTO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Enroll_DTO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Enroll_DTO::GetClassData() const { return &_class_data_; }


void Enroll_DTO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Enroll_DTO*>(&to_msg);
  auto& from = static_cast<const Enroll_DTO&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSDTO.Enroll_DTO)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ssid().empty()) {
    _this->_internal_set_ssid(from._internal_ssid());
  }
  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Enroll_DTO::CopyFrom(const Enroll_DTO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSDTO.Enroll_DTO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Enroll_DTO::IsInitialized() const {
  return true;
}

void Enroll_DTO::InternalSwap(Enroll_DTO* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ssid_, lhs_arena,
      &other->_impl_.ssid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Enroll_DTO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_EnrollDTO_2eproto_getter, &descriptor_table_EnrollDTO_2eproto_once,
      file_level_metadata_EnrollDTO_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SSDTO
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SSDTO::Enroll_DTO*
Arena::CreateMaybeMessage< ::SSDTO::Enroll_DTO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSDTO::Enroll_DTO >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
