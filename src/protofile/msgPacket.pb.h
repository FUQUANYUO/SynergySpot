// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgPacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msgPacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msgPacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msgPacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msgPacket_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msgPacket_2eproto;
namespace Msg {
class MsgPacket;
struct MsgPacketDefaultTypeInternal;
extern MsgPacketDefaultTypeInternal _MsgPacket_default_instance_;
}  // namespace Msg
PROTOBUF_NAMESPACE_OPEN
template<> ::Msg::MsgPacket* Arena::CreateMaybeMessage<::Msg::MsgPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Msg {

// ===================================================================

class MsgPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Msg.MsgPacket) */ {
 public:
  inline MsgPacket() : MsgPacket(nullptr) {}
  ~MsgPacket() override;
  explicit PROTOBUF_CONSTEXPR MsgPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgPacket(const MsgPacket& from);
  MsgPacket(MsgPacket&& from) noexcept
    : MsgPacket() {
    *this = ::std::move(from);
  }

  inline MsgPacket& operator=(const MsgPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPacket& operator=(MsgPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgPacket* internal_default_instance() {
    return reinterpret_cast<const MsgPacket*>(
               &_MsgPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgPacket& a, MsgPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgPacket& from) {
    MsgPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Msg.MsgPacket";
  }
  protected:
  explicit MsgPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateTimeFieldNumber = 1,
    kRecvSsidFieldNumber = 2,
    kSendSsidFieldNumber = 3,
    kContentFieldNumber = 4,
  };
  // bytes date_time = 1;
  void clear_date_time();
  const std::string& date_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date_time();
  PROTOBUF_NODISCARD std::string* release_date_time();
  void set_allocated_date_time(std::string* date_time);
  private:
  const std::string& _internal_date_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date_time(const std::string& value);
  std::string* _internal_mutable_date_time();
  public:

  // bytes recv_ssid = 2;
  void clear_recv_ssid();
  const std::string& recv_ssid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recv_ssid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recv_ssid();
  PROTOBUF_NODISCARD std::string* release_recv_ssid();
  void set_allocated_recv_ssid(std::string* recv_ssid);
  private:
  const std::string& _internal_recv_ssid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recv_ssid(const std::string& value);
  std::string* _internal_mutable_recv_ssid();
  public:

  // bytes send_ssid = 3;
  void clear_send_ssid();
  const std::string& send_ssid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_send_ssid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_send_ssid();
  PROTOBUF_NODISCARD std::string* release_send_ssid();
  void set_allocated_send_ssid(std::string* send_ssid);
  private:
  const std::string& _internal_send_ssid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_send_ssid(const std::string& value);
  std::string* _internal_mutable_send_ssid();
  public:

  // bytes content = 4;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:Msg.MsgPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_time_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recv_ssid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr send_ssid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msgPacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgPacket

// bytes date_time = 1;
inline void MsgPacket::clear_date_time() {
  _impl_.date_time_.ClearToEmpty();
}
inline const std::string& MsgPacket::date_time() const {
  // @@protoc_insertion_point(field_get:Msg.MsgPacket.date_time)
  return _internal_date_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgPacket::set_date_time(ArgT0&& arg0, ArgT... args) {
 
 _impl_.date_time_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Msg.MsgPacket.date_time)
}
inline std::string* MsgPacket::mutable_date_time() {
  std::string* _s = _internal_mutable_date_time();
  // @@protoc_insertion_point(field_mutable:Msg.MsgPacket.date_time)
  return _s;
}
inline const std::string& MsgPacket::_internal_date_time() const {
  return _impl_.date_time_.Get();
}
inline void MsgPacket::_internal_set_date_time(const std::string& value) {
  
  _impl_.date_time_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgPacket::_internal_mutable_date_time() {
  
  return _impl_.date_time_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgPacket::release_date_time() {
  // @@protoc_insertion_point(field_release:Msg.MsgPacket.date_time)
  return _impl_.date_time_.Release();
}
inline void MsgPacket::set_allocated_date_time(std::string* date_time) {
  if (date_time != nullptr) {
    
  } else {
    
  }
  _impl_.date_time_.SetAllocated(date_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.date_time_.IsDefault()) {
    _impl_.date_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Msg.MsgPacket.date_time)
}

// bytes recv_ssid = 2;
inline void MsgPacket::clear_recv_ssid() {
  _impl_.recv_ssid_.ClearToEmpty();
}
inline const std::string& MsgPacket::recv_ssid() const {
  // @@protoc_insertion_point(field_get:Msg.MsgPacket.recv_ssid)
  return _internal_recv_ssid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgPacket::set_recv_ssid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.recv_ssid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Msg.MsgPacket.recv_ssid)
}
inline std::string* MsgPacket::mutable_recv_ssid() {
  std::string* _s = _internal_mutable_recv_ssid();
  // @@protoc_insertion_point(field_mutable:Msg.MsgPacket.recv_ssid)
  return _s;
}
inline const std::string& MsgPacket::_internal_recv_ssid() const {
  return _impl_.recv_ssid_.Get();
}
inline void MsgPacket::_internal_set_recv_ssid(const std::string& value) {
  
  _impl_.recv_ssid_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgPacket::_internal_mutable_recv_ssid() {
  
  return _impl_.recv_ssid_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgPacket::release_recv_ssid() {
  // @@protoc_insertion_point(field_release:Msg.MsgPacket.recv_ssid)
  return _impl_.recv_ssid_.Release();
}
inline void MsgPacket::set_allocated_recv_ssid(std::string* recv_ssid) {
  if (recv_ssid != nullptr) {
    
  } else {
    
  }
  _impl_.recv_ssid_.SetAllocated(recv_ssid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.recv_ssid_.IsDefault()) {
    _impl_.recv_ssid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Msg.MsgPacket.recv_ssid)
}

// bytes send_ssid = 3;
inline void MsgPacket::clear_send_ssid() {
  _impl_.send_ssid_.ClearToEmpty();
}
inline const std::string& MsgPacket::send_ssid() const {
  // @@protoc_insertion_point(field_get:Msg.MsgPacket.send_ssid)
  return _internal_send_ssid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgPacket::set_send_ssid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.send_ssid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Msg.MsgPacket.send_ssid)
}
inline std::string* MsgPacket::mutable_send_ssid() {
  std::string* _s = _internal_mutable_send_ssid();
  // @@protoc_insertion_point(field_mutable:Msg.MsgPacket.send_ssid)
  return _s;
}
inline const std::string& MsgPacket::_internal_send_ssid() const {
  return _impl_.send_ssid_.Get();
}
inline void MsgPacket::_internal_set_send_ssid(const std::string& value) {
  
  _impl_.send_ssid_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgPacket::_internal_mutable_send_ssid() {
  
  return _impl_.send_ssid_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgPacket::release_send_ssid() {
  // @@protoc_insertion_point(field_release:Msg.MsgPacket.send_ssid)
  return _impl_.send_ssid_.Release();
}
inline void MsgPacket::set_allocated_send_ssid(std::string* send_ssid) {
  if (send_ssid != nullptr) {
    
  } else {
    
  }
  _impl_.send_ssid_.SetAllocated(send_ssid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.send_ssid_.IsDefault()) {
    _impl_.send_ssid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Msg.MsgPacket.send_ssid)
}

// bytes content = 4;
inline void MsgPacket::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& MsgPacket::content() const {
  // @@protoc_insertion_point(field_get:Msg.MsgPacket.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgPacket::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Msg.MsgPacket.content)
}
inline std::string* MsgPacket::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:Msg.MsgPacket.content)
  return _s;
}
inline const std::string& MsgPacket::_internal_content() const {
  return _impl_.content_.Get();
}
inline void MsgPacket::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgPacket::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgPacket::release_content() {
  // @@protoc_insertion_point(field_release:Msg.MsgPacket.content)
  return _impl_.content_.Release();
}
inline void MsgPacket::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Msg.MsgPacket.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msgPacket_2eproto
