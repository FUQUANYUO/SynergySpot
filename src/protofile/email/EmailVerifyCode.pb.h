// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EmailVerifyCode.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_EmailVerifyCode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_EmailVerifyCode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "DTO.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_EmailVerifyCode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_EmailVerifyCode_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EmailVerifyCode_2eproto;
namespace SSDTO {
class EmailVerifyCode_DTO;
struct EmailVerifyCode_DTODefaultTypeInternal;
extern EmailVerifyCode_DTODefaultTypeInternal _EmailVerifyCode_DTO_default_instance_;
}  // namespace SSDTO
PROTOBUF_NAMESPACE_OPEN
template<> ::SSDTO::EmailVerifyCode_DTO* Arena::CreateMaybeMessage<::SSDTO::EmailVerifyCode_DTO>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SSDTO {

// ===================================================================

class EmailVerifyCode_DTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSDTO.EmailVerifyCode_DTO) */ {
 public:
  inline EmailVerifyCode_DTO() : EmailVerifyCode_DTO(nullptr) {}
  ~EmailVerifyCode_DTO() override;
  explicit PROTOBUF_CONSTEXPR EmailVerifyCode_DTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmailVerifyCode_DTO(const EmailVerifyCode_DTO& from);
  EmailVerifyCode_DTO(EmailVerifyCode_DTO&& from) noexcept
    : EmailVerifyCode_DTO() {
    *this = ::std::move(from);
  }

  inline EmailVerifyCode_DTO& operator=(const EmailVerifyCode_DTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailVerifyCode_DTO& operator=(EmailVerifyCode_DTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailVerifyCode_DTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailVerifyCode_DTO* internal_default_instance() {
    return reinterpret_cast<const EmailVerifyCode_DTO*>(
               &_EmailVerifyCode_DTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EmailVerifyCode_DTO& a, EmailVerifyCode_DTO& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailVerifyCode_DTO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailVerifyCode_DTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailVerifyCode_DTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailVerifyCode_DTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmailVerifyCode_DTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmailVerifyCode_DTO& from) {
    EmailVerifyCode_DTO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailVerifyCode_DTO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSDTO.EmailVerifyCode_DTO";
  }
  protected:
  explicit EmailVerifyCode_DTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailAddressFieldNumber = 2,
    kVerifyCodeFieldNumber = 3,
    kStartTimeFieldNumber = 4,
    kValidTimeFieldNumber = 5,
    kIsRequestFieldNumber = 1,
    kTypeFieldNumber = 6,
  };
  // bytes email_address = 2;
  void clear_email_address();
  const std::string& email_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email_address();
  PROTOBUF_NODISCARD std::string* release_email_address();
  void set_allocated_email_address(std::string* email_address);
  private:
  const std::string& _internal_email_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email_address(const std::string& value);
  std::string* _internal_mutable_email_address();
  public:

  // bytes verify_code = 3;
  void clear_verify_code();
  const std::string& verify_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verify_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verify_code();
  PROTOBUF_NODISCARD std::string* release_verify_code();
  void set_allocated_verify_code(std::string* verify_code);
  private:
  const std::string& _internal_verify_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verify_code(const std::string& value);
  std::string* _internal_mutable_verify_code();
  public:

  // bytes start_time = 4;
  void clear_start_time();
  const std::string& start_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_time();
  PROTOBUF_NODISCARD std::string* release_start_time();
  void set_allocated_start_time(std::string* start_time);
  private:
  const std::string& _internal_start_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_time(const std::string& value);
  std::string* _internal_mutable_start_time();
  public:

  // bytes valid_time = 5;
  void clear_valid_time();
  const std::string& valid_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_valid_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_valid_time();
  PROTOBUF_NODISCARD std::string* release_valid_time();
  void set_allocated_valid_time(std::string* valid_time);
  private:
  const std::string& _internal_valid_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valid_time(const std::string& value);
  std::string* _internal_mutable_valid_time();
  public:

  // bool is_request = 1;
  void clear_is_request();
  bool is_request() const;
  void set_is_request(bool value);
  private:
  bool _internal_is_request() const;
  void _internal_set_is_request(bool value);
  public:

  // .SSDTO.Business_Type type = 6;
  void clear_type();
  ::SSDTO::Business_Type type() const;
  void set_type(::SSDTO::Business_Type value);
  private:
  ::SSDTO::Business_Type _internal_type() const;
  void _internal_set_type(::SSDTO::Business_Type value);
  public:

  // @@protoc_insertion_point(class_scope:SSDTO.EmailVerifyCode_DTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_time_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valid_time_;
    bool is_request_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_EmailVerifyCode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmailVerifyCode_DTO

// bool is_request = 1;
inline void EmailVerifyCode_DTO::clear_is_request() {
  _impl_.is_request_ = false;
}
inline bool EmailVerifyCode_DTO::_internal_is_request() const {
  return _impl_.is_request_;
}
inline bool EmailVerifyCode_DTO::is_request() const {
  // @@protoc_insertion_point(field_get:SSDTO.EmailVerifyCode_DTO.is_request)
  return _internal_is_request();
}
inline void EmailVerifyCode_DTO::_internal_set_is_request(bool value) {
  
  _impl_.is_request_ = value;
}
inline void EmailVerifyCode_DTO::set_is_request(bool value) {
  _internal_set_is_request(value);
  // @@protoc_insertion_point(field_set:SSDTO.EmailVerifyCode_DTO.is_request)
}

// bytes email_address = 2;
inline void EmailVerifyCode_DTO::clear_email_address() {
  _impl_.email_address_.ClearToEmpty();
}
inline const std::string& EmailVerifyCode_DTO::email_address() const {
  // @@protoc_insertion_point(field_get:SSDTO.EmailVerifyCode_DTO.email_address)
  return _internal_email_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailVerifyCode_DTO::set_email_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_address_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDTO.EmailVerifyCode_DTO.email_address)
}
inline std::string* EmailVerifyCode_DTO::mutable_email_address() {
  std::string* _s = _internal_mutable_email_address();
  // @@protoc_insertion_point(field_mutable:SSDTO.EmailVerifyCode_DTO.email_address)
  return _s;
}
inline const std::string& EmailVerifyCode_DTO::_internal_email_address() const {
  return _impl_.email_address_.Get();
}
inline void EmailVerifyCode_DTO::_internal_set_email_address(const std::string& value) {
  
  _impl_.email_address_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailVerifyCode_DTO::_internal_mutable_email_address() {
  
  return _impl_.email_address_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailVerifyCode_DTO::release_email_address() {
  // @@protoc_insertion_point(field_release:SSDTO.EmailVerifyCode_DTO.email_address)
  return _impl_.email_address_.Release();
}
inline void EmailVerifyCode_DTO::set_allocated_email_address(std::string* email_address) {
  if (email_address != nullptr) {
    
  } else {
    
  }
  _impl_.email_address_.SetAllocated(email_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_address_.IsDefault()) {
    _impl_.email_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDTO.EmailVerifyCode_DTO.email_address)
}

// bytes verify_code = 3;
inline void EmailVerifyCode_DTO::clear_verify_code() {
  _impl_.verify_code_.ClearToEmpty();
}
inline const std::string& EmailVerifyCode_DTO::verify_code() const {
  // @@protoc_insertion_point(field_get:SSDTO.EmailVerifyCode_DTO.verify_code)
  return _internal_verify_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailVerifyCode_DTO::set_verify_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.verify_code_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDTO.EmailVerifyCode_DTO.verify_code)
}
inline std::string* EmailVerifyCode_DTO::mutable_verify_code() {
  std::string* _s = _internal_mutable_verify_code();
  // @@protoc_insertion_point(field_mutable:SSDTO.EmailVerifyCode_DTO.verify_code)
  return _s;
}
inline const std::string& EmailVerifyCode_DTO::_internal_verify_code() const {
  return _impl_.verify_code_.Get();
}
inline void EmailVerifyCode_DTO::_internal_set_verify_code(const std::string& value) {
  
  _impl_.verify_code_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailVerifyCode_DTO::_internal_mutable_verify_code() {
  
  return _impl_.verify_code_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailVerifyCode_DTO::release_verify_code() {
  // @@protoc_insertion_point(field_release:SSDTO.EmailVerifyCode_DTO.verify_code)
  return _impl_.verify_code_.Release();
}
inline void EmailVerifyCode_DTO::set_allocated_verify_code(std::string* verify_code) {
  if (verify_code != nullptr) {
    
  } else {
    
  }
  _impl_.verify_code_.SetAllocated(verify_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.verify_code_.IsDefault()) {
    _impl_.verify_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDTO.EmailVerifyCode_DTO.verify_code)
}

// bytes start_time = 4;
inline void EmailVerifyCode_DTO::clear_start_time() {
  _impl_.start_time_.ClearToEmpty();
}
inline const std::string& EmailVerifyCode_DTO::start_time() const {
  // @@protoc_insertion_point(field_get:SSDTO.EmailVerifyCode_DTO.start_time)
  return _internal_start_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailVerifyCode_DTO::set_start_time(ArgT0&& arg0, ArgT... args) {
 
 _impl_.start_time_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDTO.EmailVerifyCode_DTO.start_time)
}
inline std::string* EmailVerifyCode_DTO::mutable_start_time() {
  std::string* _s = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:SSDTO.EmailVerifyCode_DTO.start_time)
  return _s;
}
inline const std::string& EmailVerifyCode_DTO::_internal_start_time() const {
  return _impl_.start_time_.Get();
}
inline void EmailVerifyCode_DTO::_internal_set_start_time(const std::string& value) {
  
  _impl_.start_time_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailVerifyCode_DTO::_internal_mutable_start_time() {
  
  return _impl_.start_time_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailVerifyCode_DTO::release_start_time() {
  // @@protoc_insertion_point(field_release:SSDTO.EmailVerifyCode_DTO.start_time)
  return _impl_.start_time_.Release();
}
inline void EmailVerifyCode_DTO::set_allocated_start_time(std::string* start_time) {
  if (start_time != nullptr) {
    
  } else {
    
  }
  _impl_.start_time_.SetAllocated(start_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.start_time_.IsDefault()) {
    _impl_.start_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDTO.EmailVerifyCode_DTO.start_time)
}

// bytes valid_time = 5;
inline void EmailVerifyCode_DTO::clear_valid_time() {
  _impl_.valid_time_.ClearToEmpty();
}
inline const std::string& EmailVerifyCode_DTO::valid_time() const {
  // @@protoc_insertion_point(field_get:SSDTO.EmailVerifyCode_DTO.valid_time)
  return _internal_valid_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailVerifyCode_DTO::set_valid_time(ArgT0&& arg0, ArgT... args) {
 
 _impl_.valid_time_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDTO.EmailVerifyCode_DTO.valid_time)
}
inline std::string* EmailVerifyCode_DTO::mutable_valid_time() {
  std::string* _s = _internal_mutable_valid_time();
  // @@protoc_insertion_point(field_mutable:SSDTO.EmailVerifyCode_DTO.valid_time)
  return _s;
}
inline const std::string& EmailVerifyCode_DTO::_internal_valid_time() const {
  return _impl_.valid_time_.Get();
}
inline void EmailVerifyCode_DTO::_internal_set_valid_time(const std::string& value) {
  
  _impl_.valid_time_.Set(value, GetArenaForAllocation());
}
inline std::string* EmailVerifyCode_DTO::_internal_mutable_valid_time() {
  
  return _impl_.valid_time_.Mutable(GetArenaForAllocation());
}
inline std::string* EmailVerifyCode_DTO::release_valid_time() {
  // @@protoc_insertion_point(field_release:SSDTO.EmailVerifyCode_DTO.valid_time)
  return _impl_.valid_time_.Release();
}
inline void EmailVerifyCode_DTO::set_allocated_valid_time(std::string* valid_time) {
  if (valid_time != nullptr) {
    
  } else {
    
  }
  _impl_.valid_time_.SetAllocated(valid_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.valid_time_.IsDefault()) {
    _impl_.valid_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDTO.EmailVerifyCode_DTO.valid_time)
}

// .SSDTO.Business_Type type = 6;
inline void EmailVerifyCode_DTO::clear_type() {
  _impl_.type_ = 0;
}
inline ::SSDTO::Business_Type EmailVerifyCode_DTO::_internal_type() const {
  return static_cast< ::SSDTO::Business_Type >(_impl_.type_);
}
inline ::SSDTO::Business_Type EmailVerifyCode_DTO::type() const {
  // @@protoc_insertion_point(field_get:SSDTO.EmailVerifyCode_DTO.type)
  return _internal_type();
}
inline void EmailVerifyCode_DTO::_internal_set_type(::SSDTO::Business_Type value) {
  
  _impl_.type_ = value;
}
inline void EmailVerifyCode_DTO::set_type(::SSDTO::Business_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SSDTO.EmailVerifyCode_DTO.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace SSDTO

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_EmailVerifyCode_2eproto
