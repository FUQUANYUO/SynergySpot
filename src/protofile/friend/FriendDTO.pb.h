// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendDTO.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FriendDTO_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FriendDTO_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "DTO.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FriendDTO_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FriendDTO_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FriendDTO_2eproto;
namespace SSDTO {
class AddFriend_DTO;
struct AddFriend_DTODefaultTypeInternal;
extern AddFriend_DTODefaultTypeInternal _AddFriend_DTO_default_instance_;
class FriendInfo;
struct FriendInfoDefaultTypeInternal;
extern FriendInfoDefaultTypeInternal _FriendInfo_default_instance_;
class GetFriendList_DTO;
struct GetFriendList_DTODefaultTypeInternal;
extern GetFriendList_DTODefaultTypeInternal _GetFriendList_DTO_default_instance_;
}  // namespace SSDTO
PROTOBUF_NAMESPACE_OPEN
template<> ::SSDTO::AddFriend_DTO* Arena::CreateMaybeMessage<::SSDTO::AddFriend_DTO>(Arena*);
template<> ::SSDTO::FriendInfo* Arena::CreateMaybeMessage<::SSDTO::FriendInfo>(Arena*);
template<> ::SSDTO::GetFriendList_DTO* Arena::CreateMaybeMessage<::SSDTO::GetFriendList_DTO>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SSDTO {

// ===================================================================

class FriendInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSDTO.FriendInfo) */ {
 public:
  inline FriendInfo() : FriendInfo(nullptr) {}
  ~FriendInfo() override;
  explicit PROTOBUF_CONSTEXPR FriendInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendInfo(const FriendInfo& from);
  FriendInfo(FriendInfo&& from) noexcept
    : FriendInfo() {
    *this = ::std::move(from);
  }

  inline FriendInfo& operator=(const FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendInfo& operator=(FriendInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendInfo* internal_default_instance() {
    return reinterpret_cast<const FriendInfo*>(
               &_FriendInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FriendInfo& a, FriendInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendInfo& from) {
    FriendInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSDTO.FriendInfo";
  }
  protected:
  explicit FriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kNicknameFieldNumber = 2,
  };
  // bytes ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ssid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ssid();
  PROTOBUF_NODISCARD std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // bytes nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // @@protoc_insertion_point(class_scope:SSDTO.FriendInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FriendDTO_2eproto;
};
// -------------------------------------------------------------------

class GetFriendList_DTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSDTO.GetFriendList_DTO) */ {
 public:
  inline GetFriendList_DTO() : GetFriendList_DTO(nullptr) {}
  ~GetFriendList_DTO() override;
  explicit PROTOBUF_CONSTEXPR GetFriendList_DTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFriendList_DTO(const GetFriendList_DTO& from);
  GetFriendList_DTO(GetFriendList_DTO&& from) noexcept
    : GetFriendList_DTO() {
    *this = ::std::move(from);
  }

  inline GetFriendList_DTO& operator=(const GetFriendList_DTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendList_DTO& operator=(GetFriendList_DTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendList_DTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendList_DTO* internal_default_instance() {
    return reinterpret_cast<const GetFriendList_DTO*>(
               &_GetFriendList_DTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetFriendList_DTO& a, GetFriendList_DTO& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendList_DTO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendList_DTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriendList_DTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFriendList_DTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFriendList_DTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFriendList_DTO& from) {
    GetFriendList_DTO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendList_DTO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSDTO.GetFriendList_DTO";
  }
  protected:
  explicit GetFriendList_DTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendInfosFieldNumber = 2,
    kRequestSsidFieldNumber = 1,
    kIpFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // repeated .SSDTO.FriendInfo friend_infos = 2;
  int friend_infos_size() const;
  private:
  int _internal_friend_infos_size() const;
  public:
  void clear_friend_infos();
  ::SSDTO::FriendInfo* mutable_friend_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSDTO::FriendInfo >*
      mutable_friend_infos();
  private:
  const ::SSDTO::FriendInfo& _internal_friend_infos(int index) const;
  ::SSDTO::FriendInfo* _internal_add_friend_infos();
  public:
  const ::SSDTO::FriendInfo& friend_infos(int index) const;
  ::SSDTO::FriendInfo* add_friend_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSDTO::FriendInfo >&
      friend_infos() const;

  // bytes request_ssid = 1;
  void clear_request_ssid();
  const std::string& request_ssid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_ssid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_ssid();
  PROTOBUF_NODISCARD std::string* release_request_ssid();
  void set_allocated_request_ssid(std::string* request_ssid);
  private:
  const std::string& _internal_request_ssid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_ssid(const std::string& value);
  std::string* _internal_mutable_request_ssid();
  public:

  // bytes ip = 3;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // .SSDTO.Business_Type type = 4;
  void clear_type();
  ::SSDTO::Business_Type type() const;
  void set_type(::SSDTO::Business_Type value);
  private:
  ::SSDTO::Business_Type _internal_type() const;
  void _internal_set_type(::SSDTO::Business_Type value);
  public:

  // @@protoc_insertion_point(class_scope:SSDTO.GetFriendList_DTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSDTO::FriendInfo > friend_infos_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_ssid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FriendDTO_2eproto;
};
// -------------------------------------------------------------------

class AddFriend_DTO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSDTO.AddFriend_DTO) */ {
 public:
  inline AddFriend_DTO() : AddFriend_DTO(nullptr) {}
  ~AddFriend_DTO() override;
  explicit PROTOBUF_CONSTEXPR AddFriend_DTO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFriend_DTO(const AddFriend_DTO& from);
  AddFriend_DTO(AddFriend_DTO&& from) noexcept
    : AddFriend_DTO() {
    *this = ::std::move(from);
  }

  inline AddFriend_DTO& operator=(const AddFriend_DTO& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriend_DTO& operator=(AddFriend_DTO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriend_DTO& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriend_DTO* internal_default_instance() {
    return reinterpret_cast<const AddFriend_DTO*>(
               &_AddFriend_DTO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddFriend_DTO& a, AddFriend_DTO& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriend_DTO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriend_DTO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriend_DTO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFriend_DTO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFriend_DTO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddFriend_DTO& from) {
    AddFriend_DTO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriend_DTO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSDTO.AddFriend_DTO";
  }
  protected:
  explicit AddFriend_DTO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddSsidFieldNumber = 1,
    kIpFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // bytes add_ssid = 1;
  void clear_add_ssid();
  const std::string& add_ssid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_add_ssid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_add_ssid();
  PROTOBUF_NODISCARD std::string* release_add_ssid();
  void set_allocated_add_ssid(std::string* add_ssid);
  private:
  const std::string& _internal_add_ssid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_add_ssid(const std::string& value);
  std::string* _internal_mutable_add_ssid();
  public:

  // bytes ip = 2;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // .SSDTO.Business_Type type = 3;
  void clear_type();
  ::SSDTO::Business_Type type() const;
  void set_type(::SSDTO::Business_Type value);
  private:
  ::SSDTO::Business_Type _internal_type() const;
  void _internal_set_type(::SSDTO::Business_Type value);
  public:

  // @@protoc_insertion_point(class_scope:SSDTO.AddFriend_DTO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr add_ssid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FriendDTO_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FriendInfo

// bytes ssid = 1;
inline void FriendInfo::clear_ssid() {
  _impl_.ssid_.ClearToEmpty();
}
inline const std::string& FriendInfo::ssid() const {
  // @@protoc_insertion_point(field_get:SSDTO.FriendInfo.ssid)
  return _internal_ssid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendInfo::set_ssid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ssid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDTO.FriendInfo.ssid)
}
inline std::string* FriendInfo::mutable_ssid() {
  std::string* _s = _internal_mutable_ssid();
  // @@protoc_insertion_point(field_mutable:SSDTO.FriendInfo.ssid)
  return _s;
}
inline const std::string& FriendInfo::_internal_ssid() const {
  return _impl_.ssid_.Get();
}
inline void FriendInfo::_internal_set_ssid(const std::string& value) {
  
  _impl_.ssid_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendInfo::_internal_mutable_ssid() {
  
  return _impl_.ssid_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendInfo::release_ssid() {
  // @@protoc_insertion_point(field_release:SSDTO.FriendInfo.ssid)
  return _impl_.ssid_.Release();
}
inline void FriendInfo::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  _impl_.ssid_.SetAllocated(ssid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ssid_.IsDefault()) {
    _impl_.ssid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDTO.FriendInfo.ssid)
}

// bytes nickname = 2;
inline void FriendInfo::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& FriendInfo::nickname() const {
  // @@protoc_insertion_point(field_get:SSDTO.FriendInfo.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendInfo::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDTO.FriendInfo.nickname)
}
inline std::string* FriendInfo::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:SSDTO.FriendInfo.nickname)
  return _s;
}
inline const std::string& FriendInfo::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void FriendInfo::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendInfo::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:SSDTO.FriendInfo.nickname)
  return _impl_.nickname_.Release();
}
inline void FriendInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDTO.FriendInfo.nickname)
}

// -------------------------------------------------------------------

// GetFriendList_DTO

// bytes request_ssid = 1;
inline void GetFriendList_DTO::clear_request_ssid() {
  _impl_.request_ssid_.ClearToEmpty();
}
inline const std::string& GetFriendList_DTO::request_ssid() const {
  // @@protoc_insertion_point(field_get:SSDTO.GetFriendList_DTO.request_ssid)
  return _internal_request_ssid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFriendList_DTO::set_request_ssid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_ssid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDTO.GetFriendList_DTO.request_ssid)
}
inline std::string* GetFriendList_DTO::mutable_request_ssid() {
  std::string* _s = _internal_mutable_request_ssid();
  // @@protoc_insertion_point(field_mutable:SSDTO.GetFriendList_DTO.request_ssid)
  return _s;
}
inline const std::string& GetFriendList_DTO::_internal_request_ssid() const {
  return _impl_.request_ssid_.Get();
}
inline void GetFriendList_DTO::_internal_set_request_ssid(const std::string& value) {
  
  _impl_.request_ssid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFriendList_DTO::_internal_mutable_request_ssid() {
  
  return _impl_.request_ssid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFriendList_DTO::release_request_ssid() {
  // @@protoc_insertion_point(field_release:SSDTO.GetFriendList_DTO.request_ssid)
  return _impl_.request_ssid_.Release();
}
inline void GetFriendList_DTO::set_allocated_request_ssid(std::string* request_ssid) {
  if (request_ssid != nullptr) {
    
  } else {
    
  }
  _impl_.request_ssid_.SetAllocated(request_ssid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_ssid_.IsDefault()) {
    _impl_.request_ssid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDTO.GetFriendList_DTO.request_ssid)
}

// repeated .SSDTO.FriendInfo friend_infos = 2;
inline int GetFriendList_DTO::_internal_friend_infos_size() const {
  return _impl_.friend_infos_.size();
}
inline int GetFriendList_DTO::friend_infos_size() const {
  return _internal_friend_infos_size();
}
inline void GetFriendList_DTO::clear_friend_infos() {
  _impl_.friend_infos_.Clear();
}
inline ::SSDTO::FriendInfo* GetFriendList_DTO::mutable_friend_infos(int index) {
  // @@protoc_insertion_point(field_mutable:SSDTO.GetFriendList_DTO.friend_infos)
  return _impl_.friend_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSDTO::FriendInfo >*
GetFriendList_DTO::mutable_friend_infos() {
  // @@protoc_insertion_point(field_mutable_list:SSDTO.GetFriendList_DTO.friend_infos)
  return &_impl_.friend_infos_;
}
inline const ::SSDTO::FriendInfo& GetFriendList_DTO::_internal_friend_infos(int index) const {
  return _impl_.friend_infos_.Get(index);
}
inline const ::SSDTO::FriendInfo& GetFriendList_DTO::friend_infos(int index) const {
  // @@protoc_insertion_point(field_get:SSDTO.GetFriendList_DTO.friend_infos)
  return _internal_friend_infos(index);
}
inline ::SSDTO::FriendInfo* GetFriendList_DTO::_internal_add_friend_infos() {
  return _impl_.friend_infos_.Add();
}
inline ::SSDTO::FriendInfo* GetFriendList_DTO::add_friend_infos() {
  ::SSDTO::FriendInfo* _add = _internal_add_friend_infos();
  // @@protoc_insertion_point(field_add:SSDTO.GetFriendList_DTO.friend_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSDTO::FriendInfo >&
GetFriendList_DTO::friend_infos() const {
  // @@protoc_insertion_point(field_list:SSDTO.GetFriendList_DTO.friend_infos)
  return _impl_.friend_infos_;
}

// bytes ip = 3;
inline void GetFriendList_DTO::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& GetFriendList_DTO::ip() const {
  // @@protoc_insertion_point(field_get:SSDTO.GetFriendList_DTO.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFriendList_DTO::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDTO.GetFriendList_DTO.ip)
}
inline std::string* GetFriendList_DTO::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:SSDTO.GetFriendList_DTO.ip)
  return _s;
}
inline const std::string& GetFriendList_DTO::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void GetFriendList_DTO::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFriendList_DTO::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFriendList_DTO::release_ip() {
  // @@protoc_insertion_point(field_release:SSDTO.GetFriendList_DTO.ip)
  return _impl_.ip_.Release();
}
inline void GetFriendList_DTO::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDTO.GetFriendList_DTO.ip)
}

// .SSDTO.Business_Type type = 4;
inline void GetFriendList_DTO::clear_type() {
  _impl_.type_ = 0;
}
inline ::SSDTO::Business_Type GetFriendList_DTO::_internal_type() const {
  return static_cast< ::SSDTO::Business_Type >(_impl_.type_);
}
inline ::SSDTO::Business_Type GetFriendList_DTO::type() const {
  // @@protoc_insertion_point(field_get:SSDTO.GetFriendList_DTO.type)
  return _internal_type();
}
inline void GetFriendList_DTO::_internal_set_type(::SSDTO::Business_Type value) {
  
  _impl_.type_ = value;
}
inline void GetFriendList_DTO::set_type(::SSDTO::Business_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SSDTO.GetFriendList_DTO.type)
}

// -------------------------------------------------------------------

// AddFriend_DTO

// bytes add_ssid = 1;
inline void AddFriend_DTO::clear_add_ssid() {
  _impl_.add_ssid_.ClearToEmpty();
}
inline const std::string& AddFriend_DTO::add_ssid() const {
  // @@protoc_insertion_point(field_get:SSDTO.AddFriend_DTO.add_ssid)
  return _internal_add_ssid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddFriend_DTO::set_add_ssid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.add_ssid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDTO.AddFriend_DTO.add_ssid)
}
inline std::string* AddFriend_DTO::mutable_add_ssid() {
  std::string* _s = _internal_mutable_add_ssid();
  // @@protoc_insertion_point(field_mutable:SSDTO.AddFriend_DTO.add_ssid)
  return _s;
}
inline const std::string& AddFriend_DTO::_internal_add_ssid() const {
  return _impl_.add_ssid_.Get();
}
inline void AddFriend_DTO::_internal_set_add_ssid(const std::string& value) {
  
  _impl_.add_ssid_.Set(value, GetArenaForAllocation());
}
inline std::string* AddFriend_DTO::_internal_mutable_add_ssid() {
  
  return _impl_.add_ssid_.Mutable(GetArenaForAllocation());
}
inline std::string* AddFriend_DTO::release_add_ssid() {
  // @@protoc_insertion_point(field_release:SSDTO.AddFriend_DTO.add_ssid)
  return _impl_.add_ssid_.Release();
}
inline void AddFriend_DTO::set_allocated_add_ssid(std::string* add_ssid) {
  if (add_ssid != nullptr) {
    
  } else {
    
  }
  _impl_.add_ssid_.SetAllocated(add_ssid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.add_ssid_.IsDefault()) {
    _impl_.add_ssid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDTO.AddFriend_DTO.add_ssid)
}

// bytes ip = 2;
inline void AddFriend_DTO::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& AddFriend_DTO::ip() const {
  // @@protoc_insertion_point(field_get:SSDTO.AddFriend_DTO.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddFriend_DTO::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSDTO.AddFriend_DTO.ip)
}
inline std::string* AddFriend_DTO::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:SSDTO.AddFriend_DTO.ip)
  return _s;
}
inline const std::string& AddFriend_DTO::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void AddFriend_DTO::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* AddFriend_DTO::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* AddFriend_DTO::release_ip() {
  // @@protoc_insertion_point(field_release:SSDTO.AddFriend_DTO.ip)
  return _impl_.ip_.Release();
}
inline void AddFriend_DTO::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSDTO.AddFriend_DTO.ip)
}

// .SSDTO.Business_Type type = 3;
inline void AddFriend_DTO::clear_type() {
  _impl_.type_ = 0;
}
inline ::SSDTO::Business_Type AddFriend_DTO::_internal_type() const {
  return static_cast< ::SSDTO::Business_Type >(_impl_.type_);
}
inline ::SSDTO::Business_Type AddFriend_DTO::type() const {
  // @@protoc_insertion_point(field_get:SSDTO.AddFriend_DTO.type)
  return _internal_type();
}
inline void AddFriend_DTO::_internal_set_type(::SSDTO::Business_Type value) {
  
  _impl_.type_ = value;
}
inline void AddFriend_DTO::set_type(::SSDTO::Business_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SSDTO.AddFriend_DTO.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SSDTO

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FriendDTO_2eproto
